on: [push, pull_request]

name: lint

env:
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  BUF_VERSION: 1.28.1

jobs:
  buf-lint:
    name: buf lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: fetch buf
        uses: bufbuild/buf-setup-action@v1.28.1
        with:
          github_token: ${{ github.token }}
          version: ${{ env.BUF_VERSION }}

      - name: buf lint
        uses: bufbuild/buf-lint-action@v1
        with:
          input: proto

      - name: buf format
        run: buf format -d --exit-code proto

  cargo-check-format-clippy:
    name: cargo check, format, clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: install protoc
        run: sudo apt install -y protobuf-compiler

      - name: rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.74.1
          components: clippy, rustfmt

      - name: rust cache setup
        uses: Swatinem/rust-cache@v2

      - name: cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  cargo-test:
    name: cargo test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: weird workaround for rust-toolchain != rust-toolchain.toml in the action
        run: cp rust-toolchain.toml rust-toolchain

      - name: install protoc
        run: sudo apt install -y protobuf-compiler

      - name: rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.74.1
          components: clippy, rustfmt

      - name: rust cache setup
        uses: Swatinem/rust-cache@v2

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  docker-build:
    name: docker build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: login to dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: extract metadata (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_REPO }}
      
      - name: validate docker image can be built
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
